{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["MaterialTabView","renderTabBar","props","state","navigation","route","routes","index","descriptors","descriptor","key","options","tabBarVisible","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","tabBarComponent","TabBarComponent","MaterialTopTabBar","tabBarPosition","tabBarOptions","screenProps","lazyPlaceholderComponent","pagerComponent","rest","swipeEnabled","undefined","React","createElement","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport {\n  NavigationTabProp,\n  NavigationMaterialTabOptions,\n  MaterialTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Route = {\n  key: string;\n  routeName: string;\n};\n\ntype Config = {\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEnabled?: boolean;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  initialLayout?: { width?: number; height?: number };\n  lazy?: boolean;\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\n  pagerComponent?: React.ComponentType<\n    Parameters<React.ComponentProps<typeof TabView>['renderPager']>[0]\n  >;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: MaterialTabBarOptions;\n  tabBarPosition?: 'top' | 'bottom';\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    onSwipeStart?: () => void;\n    onSwipeEnd?: () => void;\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\nclass MaterialTabView extends React.PureComponent<Props> {\n  private renderTabBar = (props: SceneRendererProps) => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      navigation,\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n      screenProps,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={screenProps}\n        navigation={navigation}\n        getLabelText={getLabelText}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n      />\n    );\n  };\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      tabBarComponent,\n      tabBarOptions,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      lazyPlaceholderComponent,\n      pagerComponent,\n      navigation,\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const { state } = navigation;\n    const route = state.routes[state.index];\n\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      // @ts-ignore\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : (options as any).swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        swipeEnabled={swipeEnabled}\n        renderTabBar={this.renderTabBar}\n        renderLazyPlaceholder={\n          lazyPlaceholderComponent !== undefined\n            ? props => React.createElement(lazyPlaceholderComponent, props)\n            : undefined\n        }\n        renderPager={\n          pagerComponent !== undefined\n            ? props => React.createElement(pagerComponent, props)\n            : undefined\n        }\n      />\n    );\n  }\n}\n\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\n  MaterialTabView\n);\n"]}